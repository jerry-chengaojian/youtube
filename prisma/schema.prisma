generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum VideoVisibility {
  private
  public
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String @unique
  password  String
  videos    Video[]
  videoViews VideoView[]
  videoReactions VideoReaction[]
  subscriptions Subscription[] @relation("subscriptions_viewer")
  subscribers Subscription[] @relation("subscriptions_creator")
  comments Comment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  videos      Video[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Video {
  id             String         @id @default(uuid())
  title          String
  description    String?
  thumbnailUrl   String?
  videoUrl       String?
  duration       Int           @default(0)
  visibility     VideoVisibility @default(private)
  
  // Relations
  userId         String
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId     String?
  category       Category?     @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  videoViews VideoView[]
  videoReactions VideoReaction[]
  comments Comment[]

  @@index([userId])
  @@index([categoryId])
}

model VideoView {
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  videoId    String
  video      Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([userId, videoId])
}

enum ReactionType {
  like
  dislike
}

model VideoReaction {
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  videoId    String
  video      Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  type       ReactionType
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([userId, videoId])
}

model Subscription {
  viewerId  String
  viewer    User     @relation(fields: [viewerId], references: [id], onDelete: Cascade, name: "subscriptions_viewer")
  creatorId String
  creator   User     @relation(fields: [creatorId], references: [id], onDelete: Cascade, name: "subscriptions_creator")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([viewerId, creatorId])
}


model Comment {
  id        String   @id @default(uuid())
  parentId  String?
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  videoId   String
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  value     String
  replies   Comment[] @relation("CommentReplies")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([videoId])
  @@index([parentId])
}
